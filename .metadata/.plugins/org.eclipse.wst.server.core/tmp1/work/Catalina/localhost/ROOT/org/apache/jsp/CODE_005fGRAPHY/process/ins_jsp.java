/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.70
 * Generated at: 2022-12-27 04:13:14 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.CODE_005fGRAPHY.process;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import common.JDBConnector;
import common.SHA256;

public final class ins_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("common.SHA256");
    _jspx_imports_classes.add("common.JDBConnector");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;


	// ### 회원가입 입력처리 페이지 ###
	
	//POST 방식의 한글처리 : 이것 안쓰면 한글깨짐!!!
	request.setCharacterEncoding("UTF-8");
	
	// DB연결 객체 생성
	JDBConnector jdbc = new JDBConnector();
	// 암호화 객체 생성
	SHA256 sha = new SHA256();
	
	try{
		
		// 파라미터 정보 가져오기
		// 1.아이디
		String mid = request.getParameter("mid");
		// 2.비번
		String mpw = request.getParameter("mpw");
		
		// 비밀번호 암호화!
		String shampw = sha.encSha256(mpw);
		
		// 3.이름
		String mnm = request.getParameter("mnm");
		// 4.전화번호
		String phone = request.getParameter("phone");
		// 5-1.이메일주소
		String email = request.getParameter("email");
		
		// 넘어온값 찍기!
// 		out.println(
// 			"<h1>" +
// 			"♣ mid : " + mid + "<br>" +
// 			"♣ mpw : " + mpw + "<br>" +
// 			"♣ sha256 : " + shampw + "<br>" +
// 			"♣ mnm : " + mnm + "<br>" +
// 			"♣ phone : " + phone + "<br>" +
// 			"♣ email : " + email + "</h1>"
// 		);

     	
     	// 7. 쿼리문작성 할당
     	String query = "INSERT INTO `join` "+
     			"(`mid`, `mpw`, `name`, `phone`, `email`) "+
     			"VALUES (?,?,?,?,?)";
     	// 쿼리문작성시 삽입될 데이터 부분을 물음표(?)로 처리하면
     	// PreparedStatement 객체에서 이부분을 입력하도록 해준다!
     	
     
     	// 11. 쿼리문 연결 사용준비하기
     	// conn연결된 DB객체
     	jdbc.pstmt = jdbc.conn.prepareStatement(query);
     	// prepareStatement(쿼리문변수)
     	// - 쿼리문을 DB에 보낼 상태완료!
     	// - 중간에 쿼리문에 넣을 값을 추가할 수 있음!
     	
     	// 12. 준비된 쿼리에 물음표부분을 처리하는 순서!
     	jdbc.pstmt.setString(1, mid);
     	jdbc.pstmt.setString(2, shampw);
     	jdbc.pstmt.setString(3, mnm);
     	jdbc.pstmt.setString(4, phone);
     	jdbc.pstmt.setString(5, email);
     	// 물음표 순서대로 값을 셋팅해 준다!
     	
     	// 13. 쿼리를 DB에 전송하여 실행한다.
     	jdbc.pstmt.executeUpdate();
  
     	// 14. 연결해제하기
     	jdbc.close();
     	
     	// 15. 입력성공시 리턴할 메시지찍기
     	out.println("ok");
     	
	} ////////// try //////////
	catch(Exception e){
 		// 실패 메시지 출력(전달값)
 		out.println("no");
	} ///////// catch //////////



    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
