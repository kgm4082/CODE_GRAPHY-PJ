/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.70
 * Generated at: 2023-01-07 09:51:01 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.CODE_005fGRAPHY.admin;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import common.JDBConnector;

public final class modify_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("common.JDBConnector");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("<!-- DB연결 객체 임포트 필수! -->\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html lang=\"ko\">\n");
      out.write("<head>\n");
      out.write("    <meta charset=\"UTF-8\">\n");
      out.write("    <title>회원권한 수정하기</title>\n");
      out.write("    <style>\n");
      out.write("        body{\n");
      out.write("            text-align: center;\n");
      out.write("            font-size: 20px;\n");
      out.write("        }\n");
      out.write("        \n");
      out.write("        label{\n");
      out.write("            display: block;\n");
      out.write("            margin-top: 15px;\n");
      out.write("        }\n");
      out.write("        \n");
      out.write("        input, select{\n");
      out.write("            font-size: 20px;\n");
      out.write("        }\n");
      out.write("    </style>\n");
      out.write("    <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js\"></script>\n");
      out.write("    <script>\n");
      out.write("    $(function(){ /// jQB //////////////////\n");
      out.write("        $(\"#sbtn\").click(function(e){\n");
      out.write("            \n");
      out.write("            // 전송기능막기!\n");
      out.write("            e.preventDefault();\n");
      out.write("            \n");
      out.write("            $(\"#dform\").submit();\n");
      out.write("            // 서브밋하면 form요소에 action속성에 지정된 \n");
      out.write("            // 페이지로 데이터와 함께 이동한다!\n");
      out.write("            // 서브밋(submit)은 \"데이터 전송\"의 의미를 가짐!\n");
      out.write("           \n");
      out.write("            \n");
      out.write("        });////// click //////////////\n");
      out.write("       \n");
      out.write("        \n");
      out.write("        /// 리스트로 돌아가기 버튼 //////\n");
      out.write("        $(\"#lbtn\").click(function(){\n");
      out.write("            history.back();\n");
      out.write("            //이전 페이지로 돌아가기\n");
      out.write("            // 좀전에 보던 리스트 페이지로 가야함!\n");
      out.write("        });////////// click ////////////////\n");
      out.write("        ////////////////////////////////////\n");
      out.write("        \n");
      out.write("        \n");
      out.write("        \n");
      out.write("    });////////// jQB //////////////////////\n");
      out.write("    </script>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("   <h1>회원권한 수정하기</h1>\n");
      out.write("   ");

   	// JDBConnector 객체생성하기
   	JDBConnector jdbc = new JDBConnector();
   
		// 파라미터 받기(모든 파라미터는 숫자가 넘어와도 모두 문자형이다!)
	// idx값을 받아서 본 페이지에서 활용한다!
	String idnum = request.getParameter("idx");
	out.println("넘어온 레코드 idx키값:" + idnum);
	String pgnum = request.getParameter("pgnum");
	out.println("넘어온 페이지번호값:" + pgnum);

	// try문 바깥에 선언하여 아래 html에서 사용할 수 있다!
	String mid = "";
	String name = "";
	String phone = "";
	String email = "";
	String auth = "";

	try {
		

		// 7. 쿼리문작성 할당
		String query = "SELECT * FROM `join` WHERE `idx`=?";
		// 해당 유일키 idx값을 넣어서 선택하면 하나의 레코드만 선택된다!
		// 데이터가 들어갈 자리만 물음표(?)로 처리하면 끝!


		// 11. 쿼리문 연결 사용준비하기
		// conn연결된 DB객체
		jdbc.pstmt = jdbc.conn.prepareStatement(query);
		// prepareStatement(쿼리문변수)
		// - 쿼리문을 DB에 보낼 상태완료!
		// - 중간에 쿼리문에 넣을 값을 추가할 수 있음!

		// 12. 쿼리에 추가할 데이터 셋팅하기!
		// -> 파라미터값이 숫자지만 String이므로 형변환 해야함!
		// 문자형을 숫자형으로 변환: Integer.parseInt(변수)
		jdbc.pstmt.setInt(1, Integer.parseInt(idnum));
		// 형변환시 에러가 발생할 수 있으므로 try,catch문 안에서 변환한다!

		// 13. 쿼리를 DB에 전송하여 실행후 결과집합(결과셋)을 가져옴!
		// ResultSet객체는 DB에서 쿼리결과를 저장하는 객체임!
		jdbc.rs = jdbc.pstmt.executeQuery();
		// executeQuery() 쿼리실행 메서드

		// 14. 저장된 결과집합의 레코드 수 만큼 돌면서 코드만들기!
		// 돌아주는 제어문은? while(조건){실행문}
		// 레코드 유무 체크 메서드는? next()
		// rs는 ResultSet 객체임!!!
		// rs.next() -> 첫라인 다음라인이 있으면 true / 없으면 false!
		// 첫번째 라인은 항상 컬럼명이 첫번째 라인이다!
		// 따라서 다음라인이 있다는 것은 결과 레코드가 있다는 말!!!

		/// 결과셋에 레코드가 있는 동안 계속 순회함!
		// rs.getString(컬럼명)
		// -> 문자형일 경우 getString(), 숫자형은 getInt()
		// -> 컬럼명은 DB 테이블에 실제로 생성된 컬럼명이다!
		while (jdbc.rs.next()) {
			mid = jdbc.rs.getString("mid");
			name = jdbc.rs.getString("name");
			phone = jdbc.rs.getString("phone");
			email = jdbc.rs.getString("email");
			auth = jdbc.rs.getString("auth");
		} //////////// while //////////////

		// 14. 연결해제하기
		jdbc.close();
		
	} //// try /////
	catch (Exception e) {
		// DB연결 실패시 여기로 들어옴!
		out.println("에러메시지:");
		out.println(e.toString());
		// toString() 문자데이터로 변환하는 메서드
	} ///// catch //////
	
      out.write("\n");
      out.write("      \n");
      out.write("       <label for=\"mid\">아이디</label>\n");
      out.write("       <input type=\"text\" name=\"mid\" id=\"mid\" maxlength=\"100\" value=\"");
      out.print(mid );
      out.write("\" disabled>\n");
      out.write("       \n");
      out.write("       <label for=\"name\">이름</label>\n");
      out.write("       <input type=\"text\" name=\"name\" id=\"name\" maxlength=\"100\" value=\"");
      out.print(name );
      out.write("\" disabled>\n");
      out.write("       \n");
      out.write("       <label for=\"phone\">전화번호</label>\n");
      out.write("       <input type=\"text\" name=\"phone\" id=\"phone\" maxlength=\"15\" value=\"");
      out.print(phone );
      out.write("\" disabled>\n");
      out.write("       \n");
      out.write("       <label for=\"email\">이메일</label>\n");
      out.write("       <input type=\"text\" name=\"email\" id=\"email\" maxlength=\"30\" value=\"");
      out.print(email );
      out.write("\" disabled>\n");
      out.write("       \n");
      out.write("   <form action=\"process/mod.jsp?idx=");
      out.print(idnum );
      out.write("&pgnum=");
      out.print(pgnum );
      out.write("\" method=\"post\" id=\"dform\">\n");
      out.write("      <!--form요소로 싸고 있는 input요소의 값만 보낼 수 있다!-->\n");
      out.write("      \n");
      out.write("       <label for=\"auth\">권한</label>\n");
      out.write("       <select name=\"auth\" id=\"auth\">\n");
      out.write("           <option value=\"S\">최고관리자</option>\n");
      out.write("           <option value=\"A\">관리자</option>\n");
      out.write("           <option value=\"M\">일반회원</option>\n");
      out.write("       </select>\n");
      out.write("       \n");
      out.write("       ");

       		// DB에서 가져온 auth권한으로 select박스의 선택을 바꿔준다!
       		out.print("<script>"+
       		"$('#auth').val('"+auth+"')"+
       		".prop('selected',true)"+
       		"</script>");
    		 // 제이쿼리 메서드 : prop(속성,true/false)
    		 // 선택select박스.prop("selected",true) -> 선택박스의 선택변경
       
      out.write("\n");
      out.write("       \n");
      out.write("       \n");
      out.write("       <!--히든필드!!! \"idx\"컬럼값 넣기(POST방식으로 함께보냄)-->\n");
      out.write("       <input type=\"hidden\" name=\"num\" id=\"num\" value=\"\">\n");
      out.write("       \n");
      out.write("       <br><br>       \n");
      out.write("       <input type=\"submit\" value=\"권한수정하기\" id=\"sbtn\">\n");
      out.write("       <!--\n");
      out.write("           form요소 내부의 submit버튼을 클릭하면\n");
      out.write("           form요소에 셋팅된 action속성의 페이지로\n");
      out.write("           전송된다!\n");
      out.write("       -->\n");
      out.write("       \n");
      out.write("       <br><br>\n");
      out.write("       <!--리스트로 돌아가기-->\n");
      out.write("       <input type=\"button\" value=\"리스트로 돌아가기\" id=\"lbtn\">\n");
      out.write("   </form>\n");
      out.write("   \n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
